Valgrind is a powerful tool for detecting memory errors in C/C++ programs, 
including the "double free" error that you are encountering. 
Here's how you can use Valgrind to help you fix the error:

1. Install Valgrind: 
If you don't have Valgrind installed on your system, you can install it using your package manager. 
For example, on Ubuntu, you can install it by running the command: 

   `sudo apt-get install valgrind`

2. Compile your program with debugging symbols: 
Before running your program under Valgrind, you should compile it with debugging symbols to make it easier to analyze the error messages. 
To do this, add the `-g` option to your compiler command. 
For example, if your program is called "myprogram.c", you can compile it with debugging symbols using the following command:

   `gcc -g myprogram.c -o myprogram`

3. Run your program under Valgrind: 
Once your program is compiled with debugging symbols, you can run it under Valgrind using the following command:

   `valgrind --leak-check=full ./myprogram`

   This command will launch your program under Valgrind and perform a full leak check, which will detect any memory errors, including the "double free" error.

4. Analyze the Valgrind output: When Valgrind detects a memory error, it will print a detailed error message that includes the location of the error, the type of error, and a stack trace that shows how the error occurred. You should carefully analyze this output to determine the cause of the error.

   In the case of a "double free" error, Valgrind will usually print a message similar to the one you saw earlier. You should look for the location where the memory was freed twice and determine why this occurred.

5. Fix the error: 
Once you have identified the cause of the "double free" error, you can fix it by modifying your code to ensure that each call to free() is paired with a corresponding call to malloc() or calloc(), and that you are not attempting to free memory that has already been freed.

6. Re-run the program under Valgrind: 
After you have fixed the error, you should re-run your program under Valgrind to verify that the error has been resolved. 
If Valgrind does not detect any memory errors, then your program is now free of memory errors and you can move on to testing and debugging other parts of your code.